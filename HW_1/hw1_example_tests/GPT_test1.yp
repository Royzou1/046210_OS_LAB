import os
import ctypes
import errno

# Assuming mpi_api.h provides Python wrappers for the MPI system calls.
# These should be defined in mpi_api.py or equivalent.

class PyMpi:
    def __init__(self):
        self.libc = ctypes.CDLL("libc.so.6")
    
    def register(self):
        res = self.libc.syscall(243)
        if res < 0:
            raise OSError(ctypes.get_errno(), os.strerror(ctypes.get_errno()))
    
    def send(self, pid, message):
        message_size = len(message)
        c_message = ctypes.create_string_buffer(message.encode('utf-8'))
        res = self.libc.syscall(244, pid, ctypes.byref(c_message), message_size)
        if res < 0:
            raise OSError(ctypes.get_errno(), os.strerror(ctypes.get_errno()))

    def receive(self, pid, message_size):
        c_message = ctypes.create_string_buffer(message_size)
        res = self.libc.syscall(245, pid, ctypes.byref(c_message), message_size)
        if res < 0:
            raise OSError(ctypes.get_errno(), os.strerror(ctypes.get_errno()))
        return c_message.value.decode('utf-8')

# Initialize the MPI wrapper
pyMpi = PyMpi()

def test_simple():
    """Simple test to invoke the syscalls with no error."""
    pid = os.getpid()

    # Register
    pyMpi.register()

    # Send ourselves some messages
    pyMpi.send(pid, "Message 1")
    pyMpi.send(pid, "Message 2")

    # Receive messages
    message1 = pyMpi.receive(pid, 100)
    print("Received:", message1)
    message2 = pyMpi.receive(pid, 100)
    print("Received:", message2)

    # Ensure messages match
    assert message1 == "Message 1"
    assert message2 == "Message 2"

def test_error_handling():
    """Test various error scenarios."""
    pid = os.getpid()
    invalid_pid = 999999  # Assuming this PID does not exist

    try:
        pyMpi.send(invalid_pid, "Message")
    except OSError as e:
        assert e.errno == errno.ESRCH

    try:
        pyMpi.receive(invalid_pid, 100)
    except OSError as e:
        assert e.errno == errno.ESRCH

    try:
        pyMpi.send(pid, "")
    except OSError as e:
        assert e.errno == errno.EINVAL

    try:
        pyMpi.receive(pid, 0)
    except OSError as e:
        assert e.errno == errno.EINVAL

def test_multi_process():
    """Test message passing between multiple processes."""
    from multiprocessing import Process, Pipe

    def child_process(child_conn):
        pyMpi.register()
        child_pid = os.getpid()
        child_conn.send(child_pid)

        # Wait to receive a message from parent
        msg = pyMpi.receive(child_pid, 100)
        child_conn.send(msg)

    parent_conn, child_conn = Pipe()
    child = Process(target=child_process, args=(child_conn,))
    child.start()

    pyMpi.register()
    child_pid = parent_conn.recv()
    
    pyMpi.send(child_pid, "Hello from parent")
    
    message = parent_conn.recv()
    print("Child received:", message)
    
    assert message == "Hello from parent"
    child.join()

def test_boundary_conditions():
    """Test edge cases like empty and max size messages."""
    pid = os.getpid()

    pyMpi.register()

    try:
        pyMpi.send(pid, "")
    except OSError as e:
        assert e.errno == errno.EINVAL

    max_size_message = "A" * 4096
    pyMpi.send(pid, max_size_message)
    message = pyMpi.receive(pid, 4096)
    print("Received max size message:", message)
    assert message == max_size_message

if __name__ == "__main__":
    test_simple()
    test_error_handling()
    test_multi_process()
    test_boundary_conditions()
